/* Definition section */
%{
#include <stdio.h>
#include <stdlib.h>
#include "y.tab.h"	/* header file generated by bison */
#define BUF_SIZE 256

extern YYSTYPE yylval; //YYSTYPE
char buf[BUF_SIZE];

extern int currScopeLevel;

extern void dump_symbol();
int isRCB = 0;
int isYYError = 0;

void printLine(int isError);

/* This macro is used to record code line */
#define CONCAT { strncat(buf, yytext, BUF_SIZE - strlen(buf) - 1); }
%}

/* Define regular expression label */
digit		[0-9]
letter		[a-zA-Z]
integer     {digit}+
float       {digit}+"."{digit}+
id			{letter}+({letter}|{digit})*

string "\""(\\.|[^"\\])*"\""
cComment "/\*"([^*]|\*+[^/])*\*+"/"
cPuls2Comment "//".*
%option yylineno

%x COMMENT STRING_STATE

/* Rules section */
%%

 /* Arithmetic */
"+"     { CONCAT; return ADD; }
"-" 	{ CONCAT; return SUB; }
"*" 	{ CONCAT; return MUL; }
"/" 	{ CONCAT; return DIV; }
"%"     { CONCAT; return MOD; }
"++"    { CONCAT; return INC; }
"--"    { CONCAT; return DEC; }

 /* Relational */
">"		{ CONCAT; return MT; }
"<"		{ CONCAT; return LT; }
">="	{ CONCAT; return MTE; }
"<="	{ CONCAT; return LTE; }
"=="	{ CONCAT; return EQ; }
"!="	{ CONCAT; return NE; }

 /* Assignment */
"="		{ CONCAT; return ASGN; }
"+="	{ CONCAT; return ADDASGN; }
"-="	{ CONCAT; return SUBASGN; }
"*="	{ CONCAT; return MULASGN; }
"/="	{ CONCAT; return DIVASGN; }
"%="	{ CONCAT; return MODASGN; }

 /* Logical */
"&&"	{ CONCAT; return AND; }
"||"	{ CONCAT; return OR; }
"!"		{ CONCAT; return NOT; }

 /* Delimiters */
"("		{ CONCAT; return LB; }
")"		{ CONCAT; return RB; }
"{"		{ CONCAT; currScopeLevel++; return LCB; }
"}"		{ CONCAT; printRCB(); return RCB; }
"["		{ CONCAT; return LSB; }
"]"		{ CONCAT; return RSB; }
","		{ CONCAT; return COMMA; }
";"		{ CONCAT; return SEMICOLON; }
"\""	{ CONCAT; return QUOTA; }

 /* Print Keywords */	
"print"		{ CONCAT; return PRINT; }

 /* Condition and Loop Keywords */
"if"		{ CONCAT; return IF; }
"else"		{ CONCAT; return ELSE; }
"for"		{ CONCAT; return FOR; }
"while"		{ CONCAT; return WHILE; }

 /* Declaration Keywords */
"string"  	{ CONCAT; yylval.string = strdup(yytext); return STRING; }
"int"		{ CONCAT; yylval.string = strdup(yytext); return INT; }
"float"  	{ CONCAT; yylval.string = strdup(yytext); return FLOAT; }
"void"		{ CONCAT; yylval.string = strdup(yytext);return VOID; }
"bool"  	{ CONCAT; yylval.string = strdup(yytext); return BOOL; }

 /* boolean Keywords */
"true"      { CONCAT; return TRUE; }
"false"     { CONCAT; return FALSE; }

"return"    { CONCAT; return RET; }
"continue"  { CONCAT; return CONT; }
"break"     { CONCAT; return BREAK; }

 /* Number Constant */
{integer}	{ CONCAT; return I_CONST; }
{float}	    { CONCAT; return F_CONST; }
{string}    { CONCAT; return STR_CONST;}

 /* Variable ID */
{id}       { CONCAT; yylval.string = strdup(yytext); return ID; }

 /* C type Comment */
"/*"				{ CONCAT; BEGIN COMMENT; }
<COMMENT>[^*\n]+	{ CONCAT; }
<COMMENT>\n			{ printLine(0); }
<COMMENT>"*"		{ CONCAT;}
<COMMENT>"*/"		{ CONCAT; BEGIN INITIAL; }

 /* C++ type Comment */
{cPuls2Comment} { CONCAT; }

 /* others */
[\n]        { if (isYYError == 0) { printLine(0); 
                } else{ isYYError = 0;} }
[ \t]		{ strncat(buf, " ", BUF_SIZE - strlen(buf) - 1); } /* Ignore */
[^ \t\n] 	{ } /* Ignore other charactor sets */
<<EOF>>     { return EOF; }

%%
void printLine(int isError)
{
    if (isRCB == 0) {
        if(isError == 0) {
            printf("%d:", yylineno);
        }
        else {
            printf("%d:", yylineno+1);
        }
        
        if (strlen(buf) != 0) {
            printf(" ");
        }
    } else {
        isRCB = 0;
    }
    printf("%s\n", buf);

    /*if not yyerror*/
    if (isError == 0) {
        memset(buf, 0, 255);
    }
}

void printRCB() {
    isRCB = 1;
    printf("%d: ", yylineno+1);
    printf("%s", buf);
    dump_symbol();
    currScopeLevel--;
    memset(buf, 0, 255);
}

int yywrap()
{
    return 1;
}
