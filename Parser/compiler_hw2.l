/* Definition section */
%{
#include <stdio.h>
#include <stdlib.h>
#include "y.tab.h"	/* header file generated by bison */
#define BUF_SIZE 256

extern YYSTYPE yylval; //YYSTYPE
char buf[BUF_SIZE];

extern int currScopeLevel;

extern void dump_symbol();

void printLine();

/* This macro is used to record code line */
#define CONCAT { strncat(buf, yytext, BUF_SIZE - strlen(buf) - 1); }
%}

/* Define regular expression label */
digit		[0-9]
letter		[a-zA-Z]
integer     {digit}+
float       {digit}+"."{digit}+
id			{letter}+({letter}|{digit})*

string "\""(\\.|[^"\\])*"\""
cComment "/\*"([^*]|\*+[^/])*\*+"/"
cPuls2Comment "//".*
%option yylineno

%x COMMENT STRING_STATE

/* Rules section */
%%

 /* Arithmetic */
"+"     { CONCAT; printf("%s", yytext); return ADD; }
"-" 	{ CONCAT; printf("%s", yytext); return SUB; }
"*" 	{ CONCAT; printf("%s", yytext); return MUL; }
"/" 	{ CONCAT; printf("%s", yytext); return DIV; }
"%"     { CONCAT; printf("%s", yytext); return MOD; }
"++"    { CONCAT; printf("%s", yytext); return INC; }
"--"    { CONCAT; printf("%s", yytext); return DEC; }

 /* Relational */
">"		{ CONCAT; printf("%s", yytext); return MT; }
"<"		{ CONCAT; printf("%s", yytext); return LT; }
">="	{ CONCAT; printf("%s", yytext); return MTE; }
"<="	{ CONCAT; printf("%s", yytext); return LTE; }
"=="	{ CONCAT; printf("%s", yytext); return EQ; }
"!="	{ CONCAT; printf("%s", yytext); return NE; }

 /* Assignment */
"="		{ CONCAT; printf("%s", yytext); return ASGN; }
"+="	{ CONCAT; printf("%s", yytext); return ADDASGN; }
"-="	{ CONCAT; printf("%s", yytext); return SUBASGN; }
"*="	{ CONCAT; printf("%s", yytext); return MULASGN; }
"/="	{ CONCAT; printf("%s", yytext); return DIVASGN; }
"%="	{ CONCAT; printf("%s", yytext); return MODASGN; }

 /* Logical */
"&&"	{ CONCAT; printf("%s", yytext); return AND; }
"||"	{ CONCAT; printf("%s", yytext); return OR; }
"!"		{ CONCAT; printf("%s", yytext); return NOT; }

 /* Delimiters */
"("		{ CONCAT; printf("%s", yytext); return LB; }
")"		{ CONCAT; printf("%s", yytext); return RB; }
"{"		{ CONCAT; printf("%s", yytext); currScopeLevel++; return LCB; }
"}"		{ CONCAT; printf("%s", yytext); dump_symbol(); currScopeLevel--; return RCB; }
"["		{ CONCAT; printf("%s", yytext); return LSB; }
"]"		{ CONCAT; printf("%s", yytext); return RSB; }
","		{ CONCAT; printf("%s", yytext); return COMMA; }
";"		{ CONCAT; printf("%s", yytext); return SEMICOLON; }
"\""	{ CONCAT; printf("%s", yytext); return QUOTA; }

 /* Print Keywords */	
"print"		{ CONCAT; printf("%s", yytext); return PRINT; }

 /* Condition and Loop Keywords */
"if"		{ CONCAT; printf("%s", yytext); return IF; }
"else"		{ CONCAT; printf("%s", yytext); return ELSE; }
"for"		{ CONCAT; printf("%s", yytext); return FOR; }
"while"		{ CONCAT; printf("%s", yytext); return WHILE; }

 /* Declaration Keywords */
"string"  	{ CONCAT; printf("%s", yytext); yylval.string = strdup(yytext); return STRING; }
"int"		{ CONCAT; printf("%s", yytext); yylval.string = strdup(yytext); return INT; }
"float"  	{ CONCAT; printf("%s", yytext); yylval.string = strdup(yytext); return FLOAT; }
"void"		{ CONCAT; printf("%s", yytext); yylval.string = strdup(yytext);return VOID; }
"bool"  	{ CONCAT; printf("%s", yytext); yylval.string = strdup(yytext); return BOOL; }

 /* boolean Keywords */
"true"      { CONCAT; printf("%s", yytext); return TRUE; }
"false"     { CONCAT; printf("%s", yytext); return FALSE; }

"return"    { CONCAT; printf("%s", yytext); return RET; }
"continue"  { CONCAT; printf("%s", yytext); return CONT; }
"break"     { CONCAT; printf("%s", yytext); return BREAK; }

 /* Number Constant */
{integer}	{ CONCAT; printf("%s", yytext); return I_CONST; }
{float}	    { CONCAT; printf("%s", yytext); return F_CONST; }
{string}    { CONCAT; printf("%s", yytext); return STR_CONST;}

 /* Variable ID */
{id}       { CONCAT; printf("%s", yytext); yylval.string = strdup(yytext); return ID; }

 /* Comment */
{cComment}      { CONCAT; printf("%s", yytext); }
{cPuls2Comment} { CONCAT; printf("%s", yytext); }

 /* others */
[\n]        { printf("\n%d: ", yylineno+1); }
[ \t]		{ printf(" "); } /* Ignore */
[^ \t\n] 	{ } /* Ignore other charactor sets */
<<EOF>>     { }

%%
void printLine()
{
    printf("%d ", yylineno+1);
    //printf("%s\n", buf);
    //memset(buf, 0, 255);
}

int yywrap()
{
    return 1;
}
